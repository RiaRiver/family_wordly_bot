import { Telegraf } from "telegraf";
import dotenv from "dotenv";
import wordsBase from "./wordsBase.js";

dotenv.config();
const allowedUsers = {
  50249573: { name: "–õ–µ—Ä–∞", emoj: "üü©" },
  38036332: { name: "–î–∏–º–∞", emoj: "üü®" },
  84321375: { name: "–ú–∞–º–∞", emoj: "üü™" },
};

const { BOT_TOKEN, FAMILY_CHAT_ID } = process.env;

const bot = new Telegraf(BOT_TOKEN);
const URL_BASE = "https://wordle.belousov.one/word/?id=ru_";
const MESSAGE_URL_BASE = `https://t.me/c/${FAMILY_CHAT_ID.slice(4)}/`;

const forwardedQueue = [];
let isProcessingForwarded = false;

const processNextForwarded = async () => {
  if (forwardedQueue.length === 0 || isProcessingForwarded) {
    return;
  }

  const { ctx, url } = forwardedQueue.shift();
  isProcessingForwarded = true;

  await handleForwarded(ctx, url);

  isProcessingForwarded = false;
  // –î–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
  setImmediate(processNextForwarded);
};

wordsBase.create();
const forceModeUsers = new Set(); // Set –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ä–µ–∂–∏–º–µ force

bot.telegram.setMyCommands([
  {
    command: "start",
    description: "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
  },
  {
    command: "help",
    description: "–ü–æ–º–æ—â—å",
  },
  {
    command: "force",
    description: "–†–µ–∂–∏–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ª–æ–≤–∞",
  },
  {
    command: "normal",
    description: "–û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º",
  },
]);

const parseLine = (line) => {
  const [sourceWord, comment] = line.split("-").map((str) => str.trim());
  const [word] = sourceWord.toLowerCase().replaceAll("—ë", "–µ").split(" ");
  const encoded = Buffer.from(word).toString("base64");

  return { word, comment, encoded };
};

const getUrlRegExp = (url) => {
  const escapedUrl = url.replace(/[.*+?^=!:${}()|\[\]\/\\]/g, "\\$&");
  return `${escapedUrl}(={0,2})`;
};

const parseWord = (url, text) => {
  const encoded = url.replace(URL_BASE, "");
  const word = Buffer.from(encoded, "base64").toString("utf-8");

  const DELETE_FROM_TEXT = [
    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–≥–∞–¥–∞—Ç—å –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –∑–∞ 6 –ø–æ–ø—ã—Ç–æ–∫ –≤ –∏–≥—Ä–µ #–≤–æ—Ä–¥–ª–∏",
    "–û—Ç–≥–∞–¥–∞–π—Ç–µ —Å–ª–æ–≤–æ –Ω–∞",
    "#–≤–æ—Ä–¥–ª–∏",
    "–í–æ—Ä–¥–ª–∏ - . –±—É–∫–≤ ./.",

    getUrlRegExp(url),
    word,

    "\u{1F7E9}", // üü© - Unicode –∫–æ–¥ —ç–º–æ–¥–∑–∏
    "\u{2B1C}", // ‚¨úÔ∏è - Unicode –∫–æ–¥ —ç–º–æ–¥–∑–∏
    "\u{1F7E8}", // üü® - Unicode –∫–æ–¥ —ç–º–æ–¥–∑–∏
  ];

  const regex = new RegExp(DELETE_FROM_TEXT.join("|"), "gi");
  const comment = text.replace(regex, "").trim();

  return { word, comment, encoded };
};

const getSender = (ctx) => {
  const user = ctx.message.forward_from || ctx.from;
  return {
    id: user.id,
    name: user.username || `${user.first_name}_${user.last_name}`,
  };
};

const findUrl = (text) => {
  const pattern = /https:\/\/wordle\.belousov\.one[^\s]*/;
  const match = text.match(pattern) || [];

  return match[0];
};

const checkWord = async (word) => {
  try {
    const rows = await wordsBase.getData(word); // –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    return rows.length ? rows : null;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ª–æ–≤–∞:", error);
  }
};

const reportDuplicate = async (ctx, duplicates) => {
  const sender = getSender(ctx);
  const senderDuplicates = duplicates.filter(
    (obj) => obj.sender_id === sender.id
  );
  const othersDuplicates = duplicates.filter(
    (obj) => obj.sender_id !== sender.id
  );

  const { word } = duplicates[0];
  const messages = [];

  if (senderDuplicates.length) {
    const senderDuplicatesDates = senderDuplicates.map(
      (obj) =>
        new Date(obj.timestamp).toLocaleString("ru-RU", {
          timeZone: "Europe/Moscow",
        }) +
        `
<a href="${MESSAGE_URL_BASE}${obj.message_id}">–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é</a>`
    );
    messages.push(`‚ùóÔ∏è"<b>${word}</b>" –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏: 
${senderDuplicatesDates.join("\n")}
    `);
  }

  if (othersDuplicates.length) {
    const othersDuplicatesNames = [
      ...new Set(othersDuplicates.map((obj) => obj.sender_name)),
    ];

    messages.push(`‚ùóÔ∏è"<b>${word}</b>" –î—Ä—É–≥–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏: 
${othersDuplicatesNames.join("\n")}`);
  }

  await ctx.reply(messages.join("\n"), {
    parse_mode: "HTML",
  });
};

const sendWord = async (
  ctx,
  { id: senderId, name: senderName },
  { word, encoded, comment },
  isForwarded = false
) => {
  const { emoj } = allowedUsers[senderId];

  const message = `
  ${emoj} <b>#${senderName}</b> –∑–∞–≥–∞–¥–∞–ª <a href="${URL_BASE}${encoded}">—Å–ª–æ–≤–æ</a>: 
  ${
    isForwarded
      ? `
–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ${new Date(
          ctx.message.forward_date * 1000
        ).toLocaleString("ru-RU", {
          timeZone: "Europe/Moscow",
        })}
    `
      : ""
  }
  
<tg-spoiler>${word}</tg-spoiler>
<code>${comment || ""}</code>

<a href="${URL_BASE}${encoded}">–ò–≥—Ä–∞—Ç—å</a>
  `;

  let messageId = null;

  try {
    const sendedMessage = await bot.telegram.sendMessage(
      FAMILY_CHAT_ID,
      message,
      {
        parse_mode: "HTML",
      }
    );

    messageId = sendedMessage.message_id; // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:", error);
    ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç.");
    throw error;
  }

  try {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–≤–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await wordsBase.saveWord(word, messageId, isForwarded, {
      id: senderId,
      name: senderName,
    });
    return messageId;
  } catch (error) {
    // –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑—É:", error);
    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑—É
    await bot.telegram.deleteMessage(FAMILY_CHAT_ID, messageId);
    ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–ª–æ–≤–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.");
    throw error;
  }
};

const handleWord = async (ctx) => {
  const sender = getSender(ctx);
  const isForceMode = forceModeUsers.has(sender.id);

  const wordObjs = ctx.message.text
    .split("\n")
    .map((line) => parseLine(line))
    .filter((lineObj) => lineObj.word);

  if (isForceMode) wordObjs.length = 1;

  for (const wordObj of wordObjs) {
    const duplicates = isForceMode ? null : await checkWord(wordObj.word);

    if (!duplicates) {
      let messageId;
      try {
        // –ï—Å–ª–∏ –¥—É–±–ª–∏–∫–∞—Ç–∞ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ
        messageId = await sendWord(ctx, sender, wordObj);
      } catch (error) {
        return;
      }

      // –£—Å–ø–µ—à–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const replyMessage = `
        "<b>${wordObj.word}</b>" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç
<a href="${MESSAGE_URL_BASE}${messageId}">–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é</a>
      `;

      await ctx.reply(replyMessage, {
        parse_mode: "HTML",
      });
    } else {
      // –ï—Å–ª–∏ –¥—É–±–ª–∏–∫–∞—Ç –Ω–∞–π–¥–µ–Ω, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–º
      reportDuplicate(ctx, duplicates);
    }
  }

  if (isForceMode) forceModeUsers.delete(sender.id);
};

const handleForwarded = async (ctx, url) => {
  const sender = getSender(ctx);
  const {
    message: { text },
  } = ctx;

  const wordObj = parseWord(url, text);

  if (await wordsBase.checkForwarded(wordObj.word, sender.id)) {
    ctx.reply("‚ùóÔ∏è –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –ø–µ—Ä–µ—Å—ã–ª–∞–ª–æ—Å—å", {
      reply_to_message_id: ctx.message.message_id,
    });
    return;
  }

  let messageId;
  try {
    messageId = await sendWord(ctx, sender, wordObj, true);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ª–æ–≤–∞:", error);
    return;
  }
  // –£—Å–ø–µ—à–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  const replyMessage = `
    –°–ª–æ–≤–æ –æ—Ç ${sender.name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç
<a href="${MESSAGE_URL_BASE}${messageId}">–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é</a>
    `;

  await ctx.reply(replyMessage, {
    parse_mode: "HTML",
    reply_to_message_id: ctx.message.message_id,
  });
};

bot.start((ctx) =>
  ctx.reply("–ü—Ä–∏–≤–µ—Ç. –≠—Ç–æ—Ç –±–æ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –í–æ—Ä–¥–ª–∏ —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤.")
);

bot.help(async (ctx) => {
  const helpMessage = `
<b>/normal –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é):</b>
–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤, –∫–∞–∂–¥–æ–µ –Ω–∞ —Å–≤–æ–µ–π —Å—Ç—Ä–æ–∫–µ.
–°–ª–æ–≤–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è, –¥—É–±–ª–∏–∫–∞—Ç—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è.
–ß–µ—Ä–µ–∑ "-" –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ

–û—Ç–∫–ª—é—á–∞–µ—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. 

–ü—Ä–∏–º–µ—Ä:<code>
–∑–∞–Ω–æ–∑–∞
–æ—Ç–Ω—é–¥—å - –ø—Ä–∏—á–∞—Å—Ç–∏–µ
—Ä–æ–º–∞—à–∫–∞ </code>
__________          __________

<b>/force –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º:</b>
–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–Ω–æ —Å–ª–æ–≤–æ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç.
–ß–µ—Ä–µ–∑ "-" –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ

–ü—Ä–∏–º–µ—Ä:<code>
–∑–∞–Ω–æ–∑–∞
–æ—Ç–Ω—é–¥—å - –ø—Ä–∏—á–∞—Å—Ç–∏–µ
—Ä–æ–º–∞—à–∫–∞ </code>

–û—Ç–ø—Ä–∞–≤–∏—Ç —Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–æ "–∑–∞–Ω–æ–∑–∞".
__________          __________

–ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –∏–∑ –¥—Ä—É–≥–æ–≥–æ —á–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –í–æ—Ä–¥–ª–∏ –∏–≥—Ä—É, —Ç–æ–≥–¥–∞ –±–æ—Ç –ø–µ—Ä–µ—à–ª–µ—Ç –µ–≥–æ –≤ —á–∞—Ç –∏–≥—Ä—ã, –µ—Å–ª–∏ —Ä–∞–Ω–µ–µ —Ç–∞–∫–æ–µ —Å–ª–æ–≤–æ –Ω–µ –±—ã–ª–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –æ—Ç —Ç–æ–≥–æ –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. 
  `;
  await ctx.reply(helpMessage, {
    parse_mode: "HTML",
  });
});

bot.command("force", async (ctx) => {
  const userId = ctx.from.id;
  forceModeUsers.add(userId); // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º force
  await ctx.reply("–í—ã –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–æ–≤–æ.");
});

bot.command("normal", async (ctx) => {
  const userId = ctx.from.id;
  forceModeUsers.delete(userId); // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–µ–∂–∏–º–∞ force
  await ctx.reply(
    "–í—ã –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ. –¢–µ–ø–µ—Ä—å —Å–ª–æ–≤–æ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—Å—è –ø–µ—Ä–µ –æ—Ç–ø—Ä–∞–≤–∫–æ–π."
  );
});

bot.on("message", async (ctx) => {
  const {
    message: { forward_date, chat, reply_to_message },
  } = ctx;

  if (!allowedUsers.hasOwnProperty(ctx.from.id)) {
    return ctx.reply("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.");
  }

  if (chat.type !== "private" || reply_to_message) {
    return;
  }

  if (!forward_date) {
    handleWord(ctx);
    return;
  }

  const url =
    findUrl(ctx.message.text) || ctx.message.link_preview_options?.url;
  const isForwarded = url && url.includes(URL_BASE);
  if (isForwarded) {
    forwardedQueue.push({ ctx, url });
    processNextForwarded();
    return;
  }

  ctx.reply("‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑");
});

bot.launch();

// Enable graceful stop
process.once("SIGINT", () => bot.stop("SIGINT"));
process.once("SIGTERM", () => bot.stop("SIGTERM"));
